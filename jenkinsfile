pipeline {
    agent any

    tools { nodejs "node" }

    // 定数や変数を定義する
    environment {
        SF_INSTANCE_URL = "https://login.salesforce.com"
        SF_USERNAME = "${SF_USERNAME}"
        SF_CONSUMER_KEY = "${SF_CONSUMER_KEY}"
        SERVER_KEY = credentials('a7e5fec5-75b8-4188-9982-398276c7015f')
        TEST_LEVEL = "RunLocalTests"
        ALIAS = "UAT"
    }

    stages {
        // -------------------------------------------------------------------------
        // server keyを使用してSalesforceに認証します。
        // -------------------------------------------------------------------------
        stage('Authorize') {
            steps {
                script {
                    rc = command 'sfdx auth:jwt:grant --instanceurl $SF_INSTANCE_URL --clientid $SF_CONSUMER_KEY --jwtkeyfile $SERVER_KEY --username $SF_USERNAME --setalias $ALIAS'
                    if (rc != 0) {
                        currentBuild.result = "FAILURE"
                    }
                }
            }
        }

        // -------------------------------------------------------------------------
        // Create Manifest
        // -------------------------------------------------------------------------
        stage('CreateManifest') {
            steps {
                script {
                    rc = command 'sfdx force:source:manifest:create --sourcepath force-app --manifestname manifest'
                    if (rc != 0) {
                        currentBuild.result = "FAILURE"
                    }
                }
            }
        }

        // -------------------------------------------------------------------------
        // Deploy
        // -------------------------------------------------------------------------
        stage('Deploy') {
            steps {
                script {
                    rc = command 'sfdx force:source:deploy --manifest manifest.xml --targetusername $ALIAS'
                    if (rc != 0) {
                        currentBuild.result = "FAILURE"
                    }
                }
            }
        }

        // -------------------------------------------------------------------------
        // Unit Test
        // -------------------------------------------------------------------------
        stage('Unit Test') {
            steps {
                script {
                    def r1 = shWithResult 'sfdx force:apex:test:run --testlevel $TEST_LEVEL --json --targetusername $ALIAS'
                    def testRunId = r1.testRunId
                    echo "${testRunId}"

                    def totalSleeps = 0
                    def status = ''
                    while (status != 'Completed' && totalSleeps < 180) {
                        sleep 5
                        totalSleeps++;

                        def query = "select Status, MethodsEnqueued, MethodsCompleted, MethodsFailed from ApexTestRunResult where AsyncApexJobId = '${testRunId}'"
                        echo "${query}"
                        def r2 = shWithResult "sfdx force:data:soql:query --usetoolingapi --query \"${query}\" --targetusername ${ALIAS} --json"
                        def record = r2.records[0]

                        status = record.Status;
                        def enqueued = record.MethodsEnqueued
                        def completed = record.MethodsCompleted
                        def failed = record.MethodsFailed

                        echo "Test run status is \"${status}\" with ${completed} of ${enqueued} methods run (${failed} methods failed) after ${totalSleeps} one minute sleeps"
                    }

                    sh returnStatus: true, script: "sfdx force:apex:test:report --testrunid ${testRunId} --resultformat human --targetusername ${ALIAS}"
                }
            }
        }
    }
    post {
        success {
            cleanWs()
        }
    }
}

def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
        return bat(returnStatus: true, script: script);
    }
}

def shWithResult(script) {
    def json = sh returnStdout: true, script: script
    def object = readJSON text: json
    if (object.status != 0) {
        error "Script ${script} failed: status ${object.status} message: ${object.message} json: ${json}"
    }
    return object.result
}
